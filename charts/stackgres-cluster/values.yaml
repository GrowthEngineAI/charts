cluster:
  create: true
  # restart: true
  # restartRole: 
  restartClusterRole: cluster-admin
  # If enabled, will set the Postgres Admin Password
  postgresPassword: ""
  restartReducedImpact: true
  restartPrimaryFirst: false
  restartTimeout: 300
  instances: 3
  postgres:
    version: 'latest'
    flavor: vanilla
    extensions:
      - name: adminpack
      - name: autoinc
      - name: colnames
      - name: pg_stat_statements
      - name: pgcrypto
      - name: plpgsql
      - name: uuid-ossp
    #  - name: timescaledb      # The extension name
    #    publisher: com.ongres  # Optional. The extension publisher
    #    version: "1.7.1"       # Optional. The extension version or channel
    #    repository: https://extensions.stackgres.io/postgres/repository # Optional. The extension repository
    ssl:
      enabled: false
      # certificateSecretKeySelector:
      #   name:
      #   key:
      # privateKeySecretKeySelector:
      #   name:
      #   key:
  sgInstanceProfile: size-s
  postgresServices:
    primary:
      enabled: true
      type: ClusterIP
    replicas:
      enabled: true
      type: ClusterIP
  # metadata:
  #   annotations:
  #     allResources:
  #       key: value
  #     clusterPods:
  #       key: value
  #     services:
  #       key: value
  #     primaryService:
  #       key: value
  #     replicasService:
  #       key: value
  #   labels:
  #     clusterPods:
  #       key: value
  pods:
    persistentVolume:
      size: 15Gi
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      #  storageClass: "-"
    disableConnectionPooling: false
    disablePostgresUtil: false
    disableMetricsExporter: false
    # scheduling:
    #   nodeSelector:
    #     key: value
    #   nodeAffinity:
    #     preferredDuringSchedulingIgnoredDuringExecution:
    #       - weight:
    #         preference:
    #           - matchExpressions:
    #             - key:
    #               operator:
    #               values:
    #                 - another-value
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       nodeSelectorTerms:
    #       - matchExpressions:
    #         - key:
    #           operator:
    #           values:
    #             - another-value
    #   tolerations:
    #     - key: 
    #       operator: 
    #       value: 
    #       effect: 
    #       tolerationSeconds: 
  configurations:
    sgPostgresConfig: postgresconf
    sgPoolingConfig: pgbouncerconf
    sgBackupConfig: backupconf
  distributedLogs:
    sgDistributedLogs: distributedlogs
    retention: 7 days
  prometheusAutobind: true
  
instanceProfiles:
  - name: size-xs
    cpu: "500m"
    memory: "512Mi"
  - name: size-s
    cpu: "1"
    memory: "2Gi"
  - name: size-m
    cpu: "2"
    memory: "4Gi"
  - name: size-l
    cpu: "4"
    memory: "8Gi"
  - name: size-xl
    cpu: "6"
    memory: "16Gi"
  - name: size-xxl
    cpu: "8"
    memory: "32Gi"

configurations:
  create: true
  postgresconfig:
    postgresql.conf:
      max_connections: '1024'
      shared_buffers: '256MB'
      random_page_cost: '1.5'
      password_encryption: 'scram-sha-256'
      checkpoint_timeout: '30'
  poolingconfig:
    pgBouncer:
      pgbouncer.ini:
        pool_mode: session
        #pool_mode: transaction
        max_client_conn: '200'
        default_pool_size: '50'
  backupconfig:
    create: false
    baseBackups:
      retention: 5
      cronSchedule: "*/60 * * * *"
      compression: lz4
      performance:
        uploadDiskConcurrency: 1


distributedLogs:
  enabled: false
  create: true
  persistentVolume:
    size: 5Gi
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    #  storageClass: "-"
  postgresServices:
    primary:
      type: ClusterIP
    replicas:
      enabled: true
      type: ClusterIP
  # scheduling:
  #   nodeSelector:
  #     key: value
  #   tolerations:
  #     - key: 
  #       operator: 
  #       value: 
  #       effect: 
  #       tolerationSeconds: 
  # metadata:
  #   annotations:
  #     allResources:
  #       key: value
  #     pods:
  #       key: value
  #     services:
  #       key: value

#You should only set following options for non production environment
nonProductionOptions:
  disableClusterPodAntiAffinity: false
  # enabledFeatureGates:
  # - babelfish-flavor

## If defined, storageClassName: <storageClass>
## If set to "-", storageClassName: "", which disables dynamic provisioning
## If undefined (the default) or set to null, no storageClassName spec is
##   set, choosing the default provisioner.  (gp2 on AWS, standard on
##   GKE, AWS & OpenStack)
defaultStorageClass: ""
# Disable if creating a cluster within the same namespace
createInstanceProfiles: true
# Configures CloudStorage if backupconfig is enabled
cloudStorage:
  s3:
    enabled: false
    bucket: my-bucket
    path: /stackgres
    # if true will turn Path to /path-{namespace}-{release}
    autoAppend: true
    region: us-east-1
    storageClass: STANDARD
    # will use existing secret if exists.
    # Keys should be accesskey, secretkey
    existingSecret: ""
    # if provided, will create a secret and configure it to be used
    accessKeyId: ""
    secretAccessKey: ""  
    awsCredentials: {}
  s3Compatible: {}
  #  bucket: stackgres
  #  path: /mypath
  #  awsCredentials:
  #    secretKeySelectors:
  #      accessKeyId:
  #        name: minio
  #        key: accesskey
  #      secretAccessKey:
  #        name: minio
  #        key: secretkey
  #  region: k8s
  #  endpoint: minio.stackgres.svc
  #  enablePathStyleAddressing: true
  #  storageClass:
  gcs: {}
  #  bucket: stackgres
  #  path: /mypath
  #  gcpCredentials:
  #    fetchCredentialsFromMetadataService: false
  #    secretKeySelectors:
  #      serviceAccountJSON:
  #        name: gcscredentials
  #        key: key
  azureBlob: {}
  #  bucket: stackgres
  #  path: /mypath
  #  azureCredentials:
  #    secretKeySelectors:
  #      storageAccount:
  #        name: azureblobcredentials
  #        key: storageaccount
  #      accessKey:
  #        name: azureblobcredentials
  #        key: accesskey


# Restores from a checkpoint in time
restoreFrom:
  enabled: false
  # Only one of the options below should be used

  # When set to the name of an existing SGBackup, the cluster is initialized by restoring the backup data to it. 
  # If not set, the cluster is initialized empty. The selected backup must be in the same namespace
  # name: cluster-backup-2424
  name: ''
  # When set to the UID of an existing SGBackup, the cluster is initialized by restoring the 
  # backup data to it. If not set, the cluster is initialized empty. 
  # The selected backup must be in the same namespace
  # uid: 'd7e660a9-377c-11ea-b04b-0242ac110004'
  uid: ''
  # An ISO 8601 date, that holds UTC date indicating at which point-in-time the database have to be restored
  # Should be the End Time in the UI
  # timestamp: 2022-03-26 00:01:53 .572 -05:00
  timestamp: ''
  # The backup fetch process may fetch several streams in parallel. 
  # Parallel fetching is enabled when set to a value larger than one
  downloadDiskConcurrency: 1


# Installs default initdb scripts
initScripts:
  enabled: false
  # Preconfigured InitDB Scripts
  presets:
    enabled: false
    harbor:
      enabled: false
      # The non-root DB user
      user: harbor
      password: secure-password
      databases:
      - harbor
      - harbor-clair
      - harbor-notaryserver
      - harbor-notarysigner
      - harbor-registry
  bootstrap:
    enabled: false
    databases: []
    # - mydb
    users: []
    # - name: myuser
    #   password: securepass
    #   superuser: true
    #   createdb: false
    #   databases:
    #   - mydb
    

  # Custom User Added Scripts
  # that will be added into
  # the initdb
  customScripts: []
  #-  name: my-custom-script
  #   enabled: true
  #   database: stackgres
  #   data: |
  #    create database "harbor";





